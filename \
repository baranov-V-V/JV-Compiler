; ModuleID = 'test/jv_programs/tmp/test_if.ll'
source_filename = "test/jv_programs/tmp/test_if.ll"

define void @main() {
entry:
  %b = alloca i32
  %a = alloca i32
  %0 = alloca i32
  store i32 3, i32* %0
  %1 = load i32, i32* %0
  store i32 %1, i32* %a
  %2 = alloca i32
  store i32 5, i32* %2
  %3 = load i32, i32* %2
  store i32 %3, i32* %b
  %4 = alloca i32
  store i32 2, i32* %4
  %5 = load i32, i32* %a, align 4
  %6 = load i32, i32* %4, align 4
  %cmp_gt = icmp sgt i32 %5, %6
  %7 = alloca i8
  %8 = sext i1 %cmp_gt to i8
  store i8 %8, i8* %7
  %9 = alloca i32
  store i32 4, i32* %9
  %10 = load i32, i32* %a, align 4
  %11 = load i32, i32* %9, align 4
  %cmp_gt1 = icmp sgt i32 %10, %11
  %12 = alloca i8
  %13 = sext i1 %cmp_gt1 to i8
  store i8 %13, i8* %12
  %14 = load i8, i8* %7
  %15 = load i8, i8* %12
  %tmp_or = or i8 %14, %15
  %16 = alloca i8
  store i8 %tmp_or, i8* %16, align 1
  %17 = load i8, i8* %16, align 1
  %18 = trunc i8 %17 to i1
  %ifcond = icmp eq i1 %18, true
  br i1 %ifcond, label %then, label %else

then:                                             ; preds = %entry
  %19 = alloca i32
  store i32 10, i32* %19
  %20 = load i32, i32* %19
  store i32 %20, i32* %b
  br label %ifcontinue

else:                                             ; preds = %entry
  %21 = alloca i32
  store i32 11, i32* %21
  %22 = load i32, i32* %21
  store i32 %22, i32* %b
  br label %ifcontinue

ifcontinue:                                       ; preds = %else, %then
  %23 = alloca [4 x i8]
  store [4 x i8] c"%d\0A\00", [4 x i8]* %23
  %24 = bitcast [4 x i8]* %23 to i8*
  %25 = alloca i32
  store i32 100, i32* %25
  %26 = load i32, i32* %b, align 4
  %27 = load i32, i32* %25, align 4
  %addtmp = add i32 %26, %27
  %28 = alloca i32
  store i32 %addtmp, i32* %28
  %29 = load i32, i32* %28
  %printCall = call i32 (i8*, ...) @printf(i8* %24, i32 %29)
  %30 = alloca i32
  store i32 4, i32* %30
  %31 = load i32, i32* %30
  store i32 %31, i32* %a
  %32 = alloca i32
  store i32 2, i32* %32
  %33 = load i32, i32* %a, align 4
  %34 = load i32, i32* %32, align 4
  %cmp_gt2 = icmp sgt i32 %33, %34
  %35 = alloca i8
  %36 = sext i1 %cmp_gt2 to i8
  store i8 %36, i8* %35
  %37 = alloca i32
  store i32 4, i32* %37
  %38 = load i32, i32* %a, align 4
  %39 = load i32, i32* %37, align 4
  %tmp_eq = icmp eq i32 %38, %39
  %40 = alloca i8
  %41 = sext i1 %tmp_eq to i8
  store i8 %41, i8* %40
  %42 = load i8, i8* %35
  %43 = load i8, i8* %40
  %tmp_or3 = and i8 %42, %43
  %44 = alloca i8
  store i8 %tmp_or3, i8* %44, align 1
  %45 = load i8, i8* %44, align 1
  %46 = trunc i8 %45 to i1
  %ifcond4 = icmp eq i1 %46, true
  br i1 %ifcond4, label %then5, label %else6

then5:                                            ; preds = %ifcontinue
  %47 = alloca i32
  store i32 13, i32* %47
  %48 = load i32, i32* %47
  store i32 %48, i32* %b
  br label %ifcontinue7

else6:                                            ; preds = %ifcontinue
  %49 = alloca i32
  store i32 11, i32* %49
  %50 = load i32, i32* %49
  store i32 %50, i32* %b
  br label %ifcontinue7

ifcontinue7:                                      ; preds = %else6, %then5
  %51 = alloca [4 x i8]
  store [4 x i8] c"%d\0A\00", [4 x i8]* %51
  %52 = bitcast [4 x i8]* %51 to i8*
  %53 = load i32, i32* %b, align 4
  %54 = load i32, i32* %a, align 4
  %addtmp8 = add i32 %53, %54
  %55 = alloca i32
  store i32 %addtmp8, i32* %55
  %56 = load i32, i32* %55
  %printCall9 = call i32 (i8*, ...) @printf(i8* %52, i32 %56)
  ret void
}

declare i32 @printf(i8*, ...)
